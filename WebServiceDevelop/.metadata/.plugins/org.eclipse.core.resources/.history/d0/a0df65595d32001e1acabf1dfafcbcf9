package com.airport.jwt;

import java.security.Key;
import java.util.Base64;
import java.util.Date;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.MalformedJwtException;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.UnsupportedJwtException;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Component
public class JwtUtil {
	
//	1. Jwt 데이터 준비
	public static final String AUTHORIZATION_HEADER = "Authorization";
	public static final String AUTHORIZATION_KEY = "auth";
	public static final String PREFIX = "bearer";
	public static final Long TOKEN_TIME = 1000L * 60 * 60;
	
//	a. SecretKey (Base64 Encode)
	@Value("${jwt.secret.key}")
	private String secretKey;
	private static Key key;
	private static final SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;
	
//	b. 매번 요청 호출 방지
	@PostConstruct
	public void init() {
		byte[] bytes = Base64.getDecoder().decode(secretKey);
		key = Keys.hmacShaKeyFor(bytes);
	}	
	
//	2. Jwt 토큰 생성	
	public static String createToken(String username, String role) {
		Date date = new Date();
		return PREFIX + 
				Jwts.builder()
						.setSubject(username)
						.claim(AUTHORIZATION_KEY, role)
						.setExpiration(new Date(date.getTime() + TOKEN_TIME))
						.setIssuedAt(date)
						.signWith(key, signatureAlgorithm)
						.compact();
	}
	
//	3. Header에서 Jwt 가져오기
	public String getJwtFromHeader(HttpServletRequest req) {
		String bearerToken = req.getHeader(AUTHORIZATION_HEADER);
		if(StringUtils.hasText(bearerToken) && bearerToken.startsWith(PREFIX)) {
			return bearerToken.substring(7);
		}
		return null;
	}
	
//	4. Jwt 토큰 검증 (만료,위조,변조 등)
	public boolean validateToken(String token) {
		try {
			Jwts.parserBuilder().setSigningKey(key).build().parseClaimsJws(token);
			return true;
		}catch (SecurityException | MalformedJwtException e) {
            log.error("Invalid JWT signature!");
        } catch (ExpiredJwtException e) {
            log.error("Expired JWT token!");
        } catch (UnsupportedJwtException e) {
            log.error("Unsupported JWT token!");
        } catch (IllegalArgumentException e) {
            log.error("Invalid JWT token!");
        }
        return false;
    }


}
