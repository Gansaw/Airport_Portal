package com.airport.config;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;

import com.airport.jwt.JwtAuthorizationFilter;
import com.airport.persistence.MemberRepo;

import lombok.RequiredArgsConstructor;

@RequiredArgsConstructor
@Configuration
@EnableWebSecurity
public class SecurityConfig {

	private final MemberRepo memberRepo;

	@Value("${jwt.secretKey}")
	private String secretKey;
	
    @Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
    
    @Bean
	public AuthenticationManager getAuthenticationManager(AuthenticationConfiguration authenticationConfiguration)
			throws Exception {
		return authenticationConfiguration.getAuthenticationManager();
	}
	

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http.csrf(csrf -> csrf.disable());
		http.cors(cors -> cors.disable());
		http.sessionManagement(
				(sessionManagement) -> sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		http.authorizeHttpRequests((authorizeHttpRequests) -> authorizeHttpRequests
				.requestMatchers(new AntPathRequestMatcher("/rates")).permitAll()				
				.requestMatchers(new AntPathRequestMatcher("/top10")).permitAll()
				.requestMatchers(new AntPathRequestMatcher("/siteinfo")).permitAll()
				.requestMatchers(new AntPathRequestMatcher("/mapsearch/**")).permitAll()
				.requestMatchers(new AntPathRequestMatcher("/airportInfo/**")).permitAll()
				.requestMatchers(new AntPathRequestMatcher("/notice")).permitAll()
				.requestMatchers(new AntPathRequestMatcher("/gallery")).permitAll()
				.requestMatchers(new AntPathRequestMatcher("/login")).permitAll()
				.requestMatchers(new AntPathRequestMatcher("/signup")).permitAll()
				.requestMatchers(new AntPathRequestMatcher("/welcome")).permitAll()
				.requestMatchers(new AntPathRequestMatcher("/user/**")).hasAnyRole("USER","ADMIN")
				.requestMatchers(new AntPathRequestMatcher("/admin/**")).hasRole("ADMIN")				
				.anyRequest().authenticated());
		
		http.formLogin(frmLogin -> frmLogin.disable());
		http.httpBasic(httpbasic -> httpbasic.disable());
		http.addFilterBefore(new JwtAuthorizationFilter(memberRepo, secretKey),
				UsernamePasswordAuthenticationFilter.class);

		return http.build();
	}
}