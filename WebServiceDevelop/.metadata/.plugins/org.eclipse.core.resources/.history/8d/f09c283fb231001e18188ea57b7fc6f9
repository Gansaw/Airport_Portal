package com.airport.jwt;

import org.springframework.http.HttpHeaders;
import java.security.Key;
import java.util.Date;

import org.springframework.stereotype.Component;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import jakarta.servlet.http.HttpServletRequest;

@Component
public class JwtService {
//	60분 경과 시 토큰 소멸
	static final long EXPIRATIONTIME = 1000L*60*60;
//	인증 타입
	static final String PREFIX = "Bearer";
//	비밀 키 생성, 시연 용도로만 이용
//	application 구성에서 읽을 수 있음
	static final Key SECRET_KEY = Keys.secretKeyFor(SignatureAlgorithm.HS256);
	
//	서명된 JWT 토큰 생성
	public String getToken(String username) {
		String token = Jwts.builder()
				.setSubject(username)
				.setExpiration(new Date(System.currentTimeMillis() + EXPIRATIONTIME))
				.signWith(SECRET_KEY)
				.compact();
		
		return token;		
	}
	
//	요청 권한 부여 헤더에서 토큰을 가져와 토큰을 확인한 후 사용자 이름을 얻음
	public String getAuthUser(HttpServletRequest req) {
		String token = req.getHeader(HttpHeaders.AUTHORIZATION);
		
		if (token != null) {
			String user = Jwts.parserBuilder()
					.setSigningKey(key)
					.build()					
		}
	}

}
