package com.airport.auth;

import java.util.ArrayList;
import java.util.Collection;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;

import com.airport.domain.Member;

import lombok.Getter;
import lombok.RequiredArgsConstructor;

@Getter
@RequiredArgsConstructor
public class UserDetailsImpl implements UserDetails {
	private static final long serialVersionUID = 1L;
	private final Member member;         

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
	    String role = member.getRole();

	    Collection<GrantedAuthority> authorities = new ArrayList<>();

	    if ("USER".equals(role)) {
	        authorities.add(new SimpleGrantedAuthority("ROLE_USER"));
	    } else if ("ADMIN".equals(role)) {
	        authorities.add(new SimpleGrantedAuthority("ROLE_ADMIN"));
	    }

	    return authorities;
	}

    @Override
    public boolean isAccountNonExpired() {
        return true;
    }

    @Override
    public boolean isAccountNonLocked() {
        return true;
    }

    @Override
    public boolean isCredentialsNonExpired() {
        return true;
    }

    @Override
    public boolean isEnabled() {
        return true;
    }
    
	public Member getMember() {
		return member;
	}

    
	@Override
	public String getUsername() {
		return member.getUsername();
	}

	@Override
	public String getPassword() {
		return member.getPassword();
	}


}