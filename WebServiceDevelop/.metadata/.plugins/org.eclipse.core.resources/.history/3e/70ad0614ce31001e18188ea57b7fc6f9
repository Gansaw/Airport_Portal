package com.airport.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@EnableWebSecurity
@Configuration
public class SecurityConfig {
	
	@Autowired
	private AuthenticationConfiguration authConfig;
 
	

	@Autowired
	public void configureGlobal(AuthenticationManagerBuilder auth) throws Exception {
	    auth.inMemoryAuthentication()
	        .withUser("user").password(bCryptPasswordEncoder().encode("password")).roles("회원")
	        .and()
	        .withUser("admin").password(bCryptPasswordEncoder().encode("password")).roles("관리자");
	}
	
	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}
	
	
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {	
		http.csrf(csrf->csrf.disable());
		http.cors(cors->cors.disable());

		http.authorizeHttpRequests(security->{
			security.requestMatchers("/member/**").authenticated()					
					.requestMatchers("/admin/**").hasRole("관리자")
					.anyRequest().permitAll();
		});

		http.formLogin(frmLogin->frmLogin.disable());		
//		http.sessionManagement(ssmg->ssmg.sessionCreationPolicy(SessionCreationPolicy.STATELESS));		
//        http.addFilter(new JWTAuthenticationFilter(authenticationManager()));
//        http.addFilter(new JWTAuthorizationFilter(authenticationManager(), memberRepo));

//        @Bean
//        @Override
//        public AuthenticationManager authenticationManagerBean() throws Exception {
//            return super.authenticationManagerBean();
//        }


		
		return http.build();
	}


}