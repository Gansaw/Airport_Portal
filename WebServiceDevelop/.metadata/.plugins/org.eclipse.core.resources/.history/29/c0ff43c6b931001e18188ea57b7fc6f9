package com.airport.jwt;

import java.security.Key;
import java.util.Base64;
import java.util.Date;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.HttpHeaders;
import org.springframework.stereotype.Component;

import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import jakarta.annotation.PostConstruct;
import jakarta.servlet.http.HttpServletRequest;

@Component
public class JwtService {
	   public static final String AUTHORIZATION_HEADER = "Authorization";      // Header KEY 값
	    public static final String AUTHORIZATION_KEY = "auth";      // 사용자 권한 값의 KEY
	    public static final String BEARER_PREFIX = "Bearer ";       // Token 식별자
	    private static final long TOKEN_TIME = 60 * 60 * 1000L;        // 토큰 만료시간 : 60분
	    
	    
	    @Value("${jwt.secret.key}") // Base64 Encode 한 SecretKey (application.properties 에 추가해둔 값)
	    private String secretKey;       // 그 값을 가져와서 secretKey 변수에 넣는다
	    private static Key key;        // Secret key 를 담을 변수
	    private static final SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;     // 사용할 알고리즘 선택

	    @PostConstruct      // 한 번만 받으면 값을 사용할 때마다, 매번 요청을 새로 호출하는 것을 방지
	    public void init() {
	        byte[] bytes = Base64.getDecoder().decode(secretKey);
	        key = Keys.hmacShaKeyFor(bytes);
	    }
	    
//	서명된 JWT 토큰 생성
	public String getToken(String username) {
	     Date date = new Date();

	        // 암호화
	        return BEARER_PREFIX +
	                Jwts.builder()
	                        .setSubject(username)               // 사용자 식별자값(ID). 여기에선 username 을 넣음
	                        .claim(AUTHORIZATION_KEY, role)     // 사용자 권한 (key, value)
	                        .setExpiration(new Date(date.getTime() + TOKEN_TIME))   // 만료 시간 : 현재시간 date.getTime() + 위에서 지정한 토큰 만료시간(60분)
	                        .setIssuedAt(date)                  // 발급일
	                        .signWith(key, signatureAlgorithm)  // 암호화 알고리즘 (Secret key, 사용할 알고리즘 종류)
	                        .compact();
	    }
	

}
