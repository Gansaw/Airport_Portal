package com.airport.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.reactive.CorsConfigurationSource;
import org.springframework.web.cors.reactive.UrlBasedCorsConfigurationSource;

import com.airport.auth.UserDetailsServiceImpl;
import com.airport.jwt.JwtAuthenticationFilter;
import com.airport.jwt.JwtAuthorizationFilter;
import com.airport.jwt.JwtUtil;

import lombok.RequiredArgsConstructor;

@EnableWebSecurity
@Configuration
@RequiredArgsConstructor
public class SecurityConfig {

	private final JwtUtil jwtUtil;
	private final UserDetailsServiceImpl userDetailsService;
	private final AuthenticationConfiguration authenticationConfiguration;

	@Bean
	public BCryptPasswordEncoder bCryptPasswordEncoder() {
		return new BCryptPasswordEncoder();
	}

	@Bean
	public AuthenticationManager authenticationManager(AuthenticationConfiguration configuration) throws Exception {
		return configuration.getAuthenticationManager();
	}

	@Bean
	public JwtAuthenticationFilter jwtAuthenticationFilter() throws Exception {
		JwtAuthenticationFilter filter = new JwtAuthenticationFilter(jwtUtil);
		filter.setAuthenticationManager(authenticationManager(authenticationConfiguration));
		return filter;
	}

	public JwtAuthorizationFilter jwtAuthorizationFilter() {
		return new JwtAuthorizationFilter(jwtUtil, userDetailsService);
	}
	
	@Bean
    public CorsConfigurationSource withCorsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.addAllowedOrigin("http://localhost:3000"); // 허용된 출처 설정, 보안을 고려하여 더 제한적으로 설정할 수 있음
        configuration.addAllowedMethod("*"); // 허용된 HTTP 메서드 설정
        configuration.addAllowedHeader("Content-Type"); // 허용된 헤더 설정
        configuration.addAllowedHeader("Authorization"); // 허용된 헤더 설정
        configuration.addAllowedHeader("Host"); // 허용된 헤더 설정
        configuration.setAllowCredentials(true); // 교차 출처 요청에 쿠키/인증 정보 포함을 허용
        configuration.addExposedHeader("Authorization"); //헤더에 (Authorization) 포함
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration); // 모든 경로에 구성 적용
        return source;
    }

	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
		http.csrf(csrf -> csrf.disable());
		http.cors(cors -> cors.disable());
		http.sessionManagement(
				(sessionManagement) -> sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS));
		http.authorizeHttpRequests((authorizeHttpRequests) -> authorizeHttpRequests
				.requestMatchers(new AntPathRequestMatcher("/", "/**")).permitAll()
		        .requestMatchers(new AntPathRequestMatcher("/user/**")).hasRole("USER")		        
		        .requestMatchers(new AntPathRequestMatcher("/user/**")).hasRole("ADMIN")
		        .requestMatchers(new AntPathRequestMatcher("/admin/**")).hasRole("ADMIN")
		        .anyRequest().permitAll()
		);
		http.formLogin(frmLogin->frmLogin.disable());
		http.httpBasic(httpbasic->httpbasic.disable());
		http.addFilter(new JwtAuthenticationFilter(authenticationConfiguration.getAuthenticationManager())); // 1. 로그인 시도 > 토큰 생성 및 반환
		http.addFilter(new JwtAuthorizationFilter(authenticationConfiguration.getAuthenticationManager(), petMemberRepository)); // 2. 토큰으로 로그인 시도 확인 및 인증 및 권한 부여

		return http.build();
	}

}