package com.airport.jwt;

import java.io.IOException;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;

import com.airport.domain.Member;
import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.servlet.FilterChain;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class JwtAuthenticationFilter extends UsernamePasswordAuthenticationFilter {
	private final JwtUtil jwtUtil;

	public JwtAuthenticationFilter(JwtUtil jwtUtil) {
		this.jwtUtil = jwtUtil;
		setFilterProcessesUrl("/login");		
	}

	@Override
	public Authentication attemptAuthentication(HttpServletRequest req, HttpServletResponse resp)
			throws AuthenticationException {
		try {
			 Member member = new ObjectMapper().readValue(req.getInputStream(), Member.class);

			return getAuthenticationManager().authenticate( 
					new UsernamePasswordAuthenticationToken(member.getUsername(), member.getPassword(), null) // 4.
			);
		} catch (IOException e) {
			log.error(e.getMessage());
			throw new RuntimeException(e.getMessage());
		}
	}
	
	// 1. 로그인 성공 시
	@Override
	protected void successfulAuthentication(HttpServletRequest req, HttpServletResponse resp, FilterChain chain, Authentication authResult) {
	    String username = ((User) authResult.getPrincipal()).getUsername();
	    String role = ((User) authResult.getPrincipal()).getAuthorities().iterator().next().getAuthority();  // role

	    String token = JwtUtil.createToken(username, role);
	    resp.addHeader(JwtUtil.AUTHORIZATION_HEADER, "Bearer " + token); 
	}

    // 2. 로그인 실패 시
    @Override
    protected void unsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) {
        response.setStatus(401);
    }

	public JwtUtil getJwtUtil() {
		return jwtUtil;
	}

}
